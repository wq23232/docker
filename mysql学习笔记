配置环境
yum -y install gcc cmake make gcc-c++ ncurses-devel openssl-devel bison ncurses chkconfig lsof 
卸载老版本
rpm -qa |  grep mysql
rpm -qa | grep mariadb
rpm -e --nodeps 老版本
下载boost 
wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz 
tar -xzf boost_1_59_0.tar.gz -C/usr/local
下载mysql
wget http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17.tar.gz
tar -xzf mysql-5.7.17.tar.gz
创建用户
groupadd mysql
useradd -s /sbin/nologin -g mysql mysql
创建目录
mkdir -p /usr/local/mysql
mkdir -p /usr/local/data
chown -R mysql:mysql /usr/local/mysql
chown -R mysql:mysql /usr/local/data
编译安装
cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/data -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DWITH_LIBWRAP=0 -DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DWITH_SSL=system -DWITH_ZLIB=system -DWITH_BOOST=/usr/local/boost_1_59_0  -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci
make 
make install
cp mysql.server /etc/init.d/mysqld
cp my-default.cnf /etc/my.cnf
初始化数据库
/usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/data  
编辑环境变量
vim /etc/profile
export PATH=$PATH:/usr/local/mysql/bin
source  /etc/profile
启动数据库
/etc/init.d/mysqld start
进入数据库
mysql -uroot -p
#创建配置文件 根据实际使用情况修改 仅供参考
cat > /data/mysql/my.cnf << EOF
[client]
port = 3306
socket = /tmp/mysql.sock
default-character-set = utf8mb4
 
[mysqld]
port = 3306
socket = /tmp/mysql.sock
 
basedir = /usr/local/mysql
datadir = /usr/local/data
pid-file = /usr/local/datamysql.pid
user = mysql
bind-address = 0.0.0.0
server-id = 1
 
init-connect = 'SET NAMES utf8mb4'
character-set-server = utf8mb4
 
#skip-name-resolve
#skip-networking
back_log = 300
 
max_connections = 1000
max_connect_errors = 6000
open_files_limit = 65535
table_open_cache = 128
max_allowed_packet = 4M
binlog_cache_size = 1M
max_heap_table_size = 8M
tmp_table_size = 16M
 
read_buffer_size = 2M
read_rnd_buffer_size = 8M
sort_buffer_size = 8M
join_buffer_size = 8M
key_buffer_size = 4M
 
thread_cache_size = 8
 
query_cache_type = 1
query_cache_size = 8M
query_cache_limit = 2M
 
ft_min_word_len = 4
 
log_bin = mysql-bin
binlog_format = mixed
expire_logs_days = 30
 
log_error = /usr/local/data/mysql-error.log
slow_query_log = 1
long_query_time = 1
slow_query_log_file = /usr/local/data/mysql-slow.log
 
performance_schema = 0
explicit_defaults_for_timestamp
 
#lower_case_table_names = 1
 
skip-external-locking
 
default_storage_engine = InnoDB
#default-storage-engine = MyISAM
innodb_file_per_table = 1
innodb_open_files = 500
innodb_buffer_pool_size = 64M
innodb_write_io_threads = 4
innodb_read_io_threads = 4
innodb_thread_concurrency = 0
innodb_purge_threads = 1
innodb_flush_log_at_trx_commit = 2
innodb_log_buffer_size = 2M
innodb_log_file_size = 32M
innodb_log_files_in_group = 3
innodb_max_dirty_pages_pct = 90
innodb_lock_wait_timeout = 120
 
bulk_insert_buffer_size = 8M
myisam_sort_buffer_size = 8M
myisam_max_sort_file_size = 10G
myisam_repair_threads = 1
 
interactive_timeout = 28800
wait_timeout = 28800
 
[mysqldump]
quick
max_allowed_packet = 16M
 
[myisamchk]
key_buffer_size = 8M
sort_buffer_size = 8M
read_buffer = 4M
write_buffer = 4M
EOF
数据库基本操作
1.创建数据库
查看数据库 show databases;
创建数据库  create database test_db;
删除数据库 drop database test_db;
存储引擎
1.数据库引擎
InnoDB 事务型引擎  支持巨大数据量的性能设计
mylsam  较高的插入和查询速度
memory 快速访问
查看默认引擎 show variables like 'storage_engine'\g
用户管理
主要在mysql这个库中的user  db  host  tables_priv columns——priv  procs_priv
user 表字段针对所有数据库
user host  password  为联合主键  
db表字段针对单个数据库数据表
table_priv   表权限控制 
host  主机名
db    数据库名
table_name 表名
grantor  修改用户
timestamp   操作时间
table_priv 表操作权限
columvs_priv 记录操作权限
columns_priv  列操作权限
host  主机名
db    数据库名
table_name 表名
grantor  修改用户
timestamp   操作时间
columvs_priv 记录操作权限
procs_priv  存储操作权限
host 主机名
db   数据库名
user   用户名
routine_name  
routine_type 存储类型
grantor   修改用户
proc_priv 拥有权限
timestamp  更新时间
用户管理
登陆选项
mysql 
-h 主机名
-u 用户名
-p 密码
-P 端口号
数据库名
-e sql语句
创建新用户
第一种 craete user 语句创建用户
create user '用户名'@'主机名'  identififd  by  '密码'
第二种 grant语句创建用户
grant 权限  on  数据库.表  to  '用户'@'主机名'identififd  by  '密码'；
删除普通用户
drop user '用户名'@'主机名'删除本地登陆权限
drop user   删除所有授权表权限记录
delete from mysql.uesr where host='主机名'and user '用户名'
修改用户密码
root用户修改密码
mysqladmin -u 用户名  -p password '新密码'
update mysql.user set Password=PASSWORD("新密码"）where user="root"and host="localhost";
flush privileges
set PASSWORD="新密码"；
flush privileges
ROOT用户修改普通用户密码
set PASSWORD for '用户'@'主机名'=PASSWORD"新密码"；
update mysql.user SET PASSWORD=PASSWORD("新密码") where user='用户'and host='主机名'
flush privileges
grant usage on 数据库.表 to '用户名'@'主机名'identififd  by  '新密码'
flush privileges
备份与恢复
mysqldump -u 用户 -p 密码 数据库 >  文件名 整个数据库进行备份
mysqldump -u 用户 -p 密码 数据库 表名 > 文件名
mysql -u user -p 数据库名 > 恢复文件
数据库迁移
mysqldump -h 发送主机名 -uroot -p密码 数据库名 | mysql -h 接收方主机名 -uroot -p密码
表的导出和导入
导出
select * from 表  into outfile '文件名'
fields
terminated by','
enclosed by'\'
escaped by '\'
terminated by '\r\n';
mysqldunp  -T 文件名 数据库 表名 -u root -p 

mysql -u -root -p --execute="sql语句" 数据库名 > 文件名
导入本地文件
load data infile '数据' into table 表名 
mysqllimport -u  root -p 数据库  文件名
mysql 日志
错误日志
show variables like 'log_error'
删除错误日志
flush logs
查询日志
设置查询日志
log= 路径/文件名
二进制日志：记录数据库变化的日志
查看二进制日志
show binary logs
在my.cnf 下 mysqld 下设置
log-bin=路径/文件名
expire_logs_day=10 保留日期10天
max_binlg_size=100M 文件最大100M
删除二进制日志文件
reset master 删除所有的日志文件
purge maste logs to 'log_name' 指定文件名
purge maste logs before'date'  指定日期
使用二进制日志恢复数据库
mysqlbinlog  文件名 |mysql -u 用户 -p 密码
慢查询日志
记录查询时长超过指定时间的日志
log-slow-queries= 路径/文件
long-query_time=n 表示超过这个时间都存储在慢查询日志中
数据库复制
主从复制
第一授权：将从数据库的账户授权给主数据库
第二开启binlog：主从数据库都开启binlog
第三在从数据库设置   change master to
                 master_host="主ip地址"
                 master_user="授权用户"
                 master_password="密码"
                 master_log_file="主库二进制日志文件名"
                 master_log_pos="位置码"
                 
  查看状态  show slave status
  切换主从服务器
  第一步检查是否全部更新
  show processlist
  在从库种停止状态
  stop slave
  重新建立二进制日志
 重复主从数据库建立过程
 
 
 
 
 1.mysql用户管理
 创建用户语法
 CREATE USER '用户'@'主机' IDENTIFIED BY '密码';
 授权语法
 grant 权限 on 权限范围  to 用户  identified  by '密码'
 移除权限语法
 REVOKE 权限 ON *.* FROM 用户@主机;
 例子1创建一个用户
 create user clsn@%indentified by '123456'
 grant all on *.* to clsn@'%'indentified by '123456'
 revoke delete on *.* from clsn&'%'
 2.使用mysqladmin管理用户
 mysqladmin -u用户 -p'密码' password 修改密码
 mysqladmin -u用户 -p'密码'  status 显示服务状态
 mysqladmin -u用户 -p'密码' flush-privileges 刷新授权表
 mysqladmin -u用户 -p'密码' flush-logs 刷新日志
 mysqladmin -u用户 -p'密码' version 显示版本
mysqladmin -u用户 -p'密码' create databasename 创建数据库
mysqladmin -u用户 -p'密码'  sql语句  执行sql语句
3使用mysqldump备份数据库
mysqldump 数据库.表名 > 文本

mysqldump -u 用户 -p 密码 数据库 >  文件名 整个数据库进行备份
mysqldump -u 用户 -p 密码 数据库 表名 > 文件名
mysql -u user -p 数据库名 > 恢复文件
数据库迁移
mysqldump -h 发送主机名 -uroot -p密码 数据库名 | mysql -h 接收方主机名 -uroot -p密码
mysqldump  -T 文件名 数据库 表名 -u root -p 

mysql -u -root -p --execute="sql语句" 数据库名 > 文件名
导入本地文件
load data infile '数据' into table 表名 
mysqllimport -u  root -p 数据库  文件名
3 mysql常用语句详解
select 列名 from 表名  where  条件
                      order by
                      limit
3.1 多表连接
select  列名    from   表1，表2   where
自然连接
找到两表相等的列做相等连接
使用useing子句进行连接
select 列名   from   表1,表2 useing(列名)
4.集合操作
select  ...
union(all|distinct)
select...
4.分组
group by  : 查询结果后进行排序
having ：查询结果前进行排序
where：过滤

















































































2.
3.
数据 









































