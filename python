


Python介绍
发展史
	2.4  50万行
	Python 2.6 - October 1, 2008 
	Python 2.6.1 - October 1, 2008 
	Python 2.6.6 - October 1, 2008 
	Python 3.0 - December 3, 2008 
	Python 2.7 - July 3, 2010  #目前业内主流使用的工业版本依然是2.7
	
	print "hello world" #in 2.x
	print("hello world") #in 3.x
	
	
	In summary : Python 2.x is legacy, Python 3.x is the present and future of the language
	
	总结: python2.x 是遗产， python3.x是现在和未来的语言
	
	Python 3.0 was released发布 in 2008. The final最终 2.x version 2.7 release came out in mid-2010,
	with a statement声明 of extended延长 support支持 for this end-of-life release. The 2.x branch分支 will see no new major重大 releases after that.
	3.x is under active development 正在活跃的开发 and has already已经 seen有了 over超过 five years of stable稳定的 releases版本, including包括 version版本 3.3 in 2012,

3.4 in 2014, and 3.5 in 2015. This means意味着 that all recent近期的 standard标准的 library库 improvements升级/改进, for example例子, are only

available可用的 by default默认 in Python 3.x.

2.x = 默认编码 =ASSIC =不支持
3.x = 默认编码 =UNICODE =默认支持中文



Guido van Rossum (the original creator of the Python language) decided决定 to clean up清理 Python 2.x properly适当的, with less regard不管 for backwards向后 compatibility兼容 than is the case for new releases in the 2.x range. The most drastic激进的 improvement is the better更好的 Unicode(是一个编码)中文支持 support (with all text字符 strings being Unicode by default) as well as saner bytes/Unicode separation.

Besides另外, several几个 aspects方面 of the core核心 language (such as print and exec being statements, integers using floor division) have been adjusted调整为 to be easier更简单的 for newcomers新手 to learn and to be more consistent持续的 with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, "range()" returns a memory efficient iterable, not a list as in 2.x). 



python 2 vs 3
	1。 默认支持中文
	2. 不兼容2.x 
	3. 核心语法调整，更易学
	4. 新特性默认只在3.x上有
	


	
	系统位数
	
	32bit =内存的最大寻址空间是2**32， 4GB 
	64bit, =2**64 但实际上支持不到这莫大的内存，2**4x, 目前主板支持的最大的内存是100多GB
	
	
	4gb ==64位系统 会不会比32位系统快？ = 一样的 
	
	硬盘：
		5400转 = 每分钟 =骑自行车
		7200转 = 每分钟 =骑电动车
		10000转 = 每分钟 =骑快速电动车
		15000转 = 每分钟 =骑摩托车  机械硬盘最快的
		
		SSD =	Tesla 
		
	
	
	
Python 2 or 3?
安装
	交互器模式
	
	开始--》cmd --> cd c:\  -->dir 
	cd = change directory 
	dir = 查看当前目录文件列表
	
	
	cd .. 返回上一层目录
	cd ../.. 返回上上一层目录
	cd ../../.. 返回上上上一层目录
	cd ../../../.. 返回上上上上一层目录
	
	


	D:\>"d:\Program Files\Python35\python.exe" c:\hello.txt
	Hello World!
		
	
	#c:\hello.txt   .txt 代表文件的扩展名（后缀名），用于区分文件类型
	.txt 记事本文本文件
	.doc word文件
	.xls excel文件
	.ppt PPT文件
	.exe 可执行文件
	.jpg .png  .jpeg  图片
	.gif 动态图片
	.pdf 	PDF文件
	.mp4 .avi 视频
	.py   python文件
	.java java 文件
	.c .h  c源码
	.php php文件
	.js   javascript 

	环境变量
	
	D:\Program Files\Python35\Scripts\;
	D:\ProgramFiles\Python35\;
	%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;
	D:\Program Files\Python27
	
	
	执行py程序方式为:
		1. 交互器，缺点程序不能永久保存，主要用与简单的语法测试相关
		2. 文件执行
		
	
Hello World程序
变量
	变量 是 为了存储 程序运算过程中的一些中间 结果，为了方便日后调用
	
	Variables变量 are used to store保存、储存 information信息 to be referenced被日后调用 and manipulated操作或更改 in a computer program程序. They also并且还 provide提供 a way方式 of labeling标记 data数据 with a descriptive描述性 name, so our programs can be understood理解 more clearly更清晰 by the reader阅读者 and ourselves我们自己. It is helpful to think of variables as containers容器 that hold保持、保存 information(如果我们把变量看作成是一个保存信息的容器是更容易理解的). Their sole主要 purpose目的 is to label标记 and store存储 data in memory内存里. This data数据 can then然后 be used使用它 throughout整个 your program.

	变量的命名规则
	1. 要具有描述性
	2. 变量名只能_,数字，字母组成，不可以是空格或特殊字符(#?<.，￥$*!~)
	3. 不能以中文为变量名
	4. 不能以数字开头
	5. 保留字符是不能被使用
	
	
	
	常量 ：不变的量 pie = 3.141592653.... 
	在py里面所有的变量都是可变的 ,所以用全部大写的变量名来代表次变量为常量
	
	
	内存何时释放？
	
	
	字符编码
	支持中文的第一张表就叫 GB2312 
	
	1980 gb2312 6700+
	1995 gbk1.0 20000
	2000 gb18030 27000 
	big5 台湾
	
	unicode 万国码  支持所有国家和地区的编码 
	2**16 = 65535 = 存一个字符 统一占用2个字节
	
	
	UTF-8 = unicode 的扩展集，可变长的字符编码集
	
	Assic -->Gb2312 ->gbk1.0-->gb18030 
	Assic -->unicode -->utf-8   /utf-16 
	
	
	Python2.x == Assic 默认编码
		#!-*- coding:utf-8 -*- 
		#coding:utf-8 
		
	python3.x == unicode默认编码 
	
	
	unicode 是向下兼容gb2312 , gbk 

	
注释
	单行注释 用#
	多行注释用三个单引号或三个双引号 '''被注释的内容'''
	
	
	
	
	
	
	
	
	
	
	
	
用户输入

	

模块初识
.pyc是个什么鬼？
数据类型初识
数据运算
表达式if ...else语句
例子：
age = 58
guess_age =  int(   input(">>:"))
if guess_age == age :
    print ("yes")
else:
    print("no")

	缩进 IndentationError: expected an indented block
	                            ^
	IndentationError: unindent does not match any outer indentation level
	SyntaxError: invalid syntax 语法错误
	tab != 4个空格
	
	缩进级别必须保持一致 
	
bif：语言内置函数
   hlep（print）
字符串：文本
字符串：用单引号或者双引号表示
长字符串用："""三引号表示
转义字符：反斜杠表示
条件分支：
  if：
   条件为真后执行
  eles
   条件为假的操作
  while循环
  条件为真时操作循环
  for 循环
  for i in range(10)
	
break: 终止当前循环跳出循环体
continue: 终止当前循环执行下一循环
列表：将数据存储在一个仓库中
创建方法：列表名=[1,2,]
向列表添加元素
表名.append(元素)在列表最后
表名.extend([3,4])
表名.insert(元素)在列表前面
获取列表中元素
表名=[元素在列表中位置]
删除元素
表名.remove("元素名")
del 表名[元素位置]
 表名.pop[元素位置]
 分片
 表名[位置：位置]
 元祖：不可变的列表
 创建元祖
 祖名=（元素名称1,元素名称2）
 列表=list(元素)
 tuple
 str()：将列表转换字符串
 max()：取序列最大值
 min()：取序列最小值
 sum()：序列求和
 sorted():序列排序
 reversed():倒转位置
enumerate():生成二元数组
zip():生产多元数组
函数
创建函数def 名称():
def discount(price,rate):/*定义函数名
    final_price = price * rate /* 函数过程
    return final_price /* 函数返回值
old_price = float(input('请输入原价:'))
rate = float(input('请输入折扣：'))
new_price = discount(old_price,rate) /*调用函数
print('价格是：',new_price)
全局变量：整个函数起做用的变量
局部变量：函数内部的起作用的变量
global ：标志全球变量
内嵌函数：函数内部内嵌个函数
闭包：
匿名函数：不需要定义函数使用关键字lambda
bif
filter:过滤真值
map：：进行迭代
迭代：自己调用自己本身

def factorial(n):
    if n == 1:
        return 1
    else:
        return n*factorial(n-1)
    number= int(input('qingshuruyigezhengshu:'))
    result = factorial(number)
    print("%d dejiecheng:%d"% (number,result))

斐波那契数列：
def fab(n):
    a1 = 1
    a2 = 1
    a3 = 1
    if n < 1:
        print('输入有误请重新输入：')
        return -1
    while (n - 2) > 0:
        a3 = a1 + a2
        a1 = a2
        a2 = a3
        n -= 1
        return a3
   # n=int(input('请输入一个数：'))
    #result = fab(n)
    #print(result)
    result = fab(20)
    if result != -1:
        print('总共有%d' % result)

迭代：
def fab(n):
    if n < 1:
        print('输入有误！')
        return -1
    if n == 1 or n == 2:
        return 1
    else:
        return fab(n-1)+ fab(n-2)
    result = fab(20)
    if result != -1:
        print('总共有%d对兔子' % result)
	
汉诺塔：

def hanoi(n,x,y,z):
    if n == 1:
        print(x,'-->',z)
    else:
        hanoi(n-1,x,y,z)
        print(x,'-->',z)
        hanoi(n-1,y,x,z)
n = int(input('请输入汉诺塔：'))
hanoi(n,'X','Y','Z')
字典：python 中唯一映射的类型 
创建字典：字典名 = {元素}
内置函数：fromkes():创建一个并返回一个新的字典包括字典的位置和值
     fronkes((1),123)
         key():返回字典的值
	 values() 返回字典中所有值
	 items():所有项
	 get() 访问字典位置
	 clear：清空字典
	 copy:复制字典
	 pop:弹出对应值
异常处理：
       1.断言语句失败
       assertion
       2.未知对象属性
       attributeerror
       3.indexerror
        索引超出范围
       4.keyERROR
       字典查找一个不存在的关键字
       5.nameerror
        访问一个不存在的变量
       类和对象
      对象：把数据和代码封装到一起
      
       
     




























































































































































































表达式while 循环
作业需求





